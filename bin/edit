#!/usr/bin/env python

#   This file is part of wald:meta
#   Copyright (C) 2014  Kuno Woudt <kuno@frob.nl>
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of copyleft-next 0.3.1.  See copyleft-next-0.3.1.txt.

from __future__ import absolute_import
from __future__ import print_function
from __future__ import unicode_literals

import os
import sys
import activate
from collections import namedtuple
from os.path import abspath, dirname

activate.uninstalled ()
activate.virtualenv ('waldmeta')

import rdflib
from rdflib.namespace import FOAF, RDF
from rdflib.term import BNode, Literal, URIRef

import wald.storage.dataset
import wald.storage.edit
import wald.storage.setup
import wald.storage.sparql
import wald.storage.tools

if __name__ == '__main__':
    project_root = dirname(dirname(abspath(__file__)))

    setup = wald.storage.setup.load(project_root)
    graphs = wald.storage.dataset.load(setup)

    music = graphs['music']

    wald.storage.sparql.clear(music, are_you_sure=True)

    ld = wald.storage.tools.LinkedData(project_root)

    g = ld.parse(wald.storage.edit.first_changeset, format='json-ld')
    changeset = wald.storage.edit.normalize(music.mint_edit(), g)
    update = wald.storage.edit.sparql_update(music, changeset)

    wald.storage.sparql.update(music, update)

    g = ld.parse(wald.storage.edit.test_changeset, format='json-ld')
    changeset = wald.storage.edit.normalize(music.mint_edit(), g)
    update = wald.storage.edit.sparql_update(music, changeset)
    wald.storage.sparql.update(music, update)

    data_query = "SELECT * WHERE { GRAPH %s { ?subject ?predicate ?object } } ORDER BY ?subject ?predicate ?object" % (
        music.data_graph.n3())

    response = wald.storage.sparql.query(music, data_query)
    print (response)
